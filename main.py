import logging
import os
import requests
from flask import Flask, request
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
AIRTABLE_TOKEN = os.getenv("AIRTABLE_TOKEN")
BASE_ID = os.getenv("BASE_ID")
TABLE_NAME = os.getenv("TABLE_NAME", "Photos")

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(level=logging.INFO)

# === Flask ===
app = Flask(__name__)

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===
telegram_app = Application.builder().token(BOT_TOKEN).build()

# === –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Airtable ===
def fetch_airtable_photos():
    url = f"https://api.airtable.com/v0/{BASE_ID}/{TABLE_NAME}"
    headers = {"Authorization": f"Bearer {AIRTABLE_TOKEN}", "Content-Type": "application/json"}
    try:
        response = requests.get(url, headers=headers)
        data = response.json()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Airtable: {e}")
        return []

    photos = []
    for record in data.get("records", []):
        fields = record.get("fields", {})
        name = fields.get("Name")
        photo_url = fields.get("Photo URL")
        if name and photo_url:
            photos.append((name, photo_url))
    return photos

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /photos ===
async def send_photos(update: Update, context: ContextTypes.DEFAULT_TYPE):
    photos = fetch_airtable_photos()
    if not photos:
        await update.message.reply_text("–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    for name, photo_url in photos[:10]:  # –ø–µ—Ä–≤—ã–µ 10 —Ñ–æ—Ç–æ
        try:
            await context.bot.send_photo(chat_id=update.effective_chat.id, photo=photo_url, caption=name)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {name}: {e}")

    await update.message.reply_text("–ì–æ—Ç–æ–≤–æ ‚úÖ")

telegram_app.add_handler(CommandHandler("photos", send_photos))

# === Flask route –¥–ª—è Telegram webhook ===
@app.route("/webhook", methods=["POST"])
def webhook():
    """–ü–æ–ª—É—á–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram"""
    update = Update.de_json(request.get_json(force=True), telegram_app.bot)
    telegram_app.update_queue.put_nowait(update)
    return "ok", 200

# === –ü—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç ===
@app.route("/")
def home():
    return "‚úÖ Telegram Bot is running on Render via Webhook!"

# === –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ ===
def set_webhook():
    webhook_url = f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}/webhook"
    telegram_app.bot.set_webhook(url=webhook_url)
    logging.info(f"üåê Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")

# === –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ===
if __name__ == "__main__":
    set_webhook()
    port = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=port)
